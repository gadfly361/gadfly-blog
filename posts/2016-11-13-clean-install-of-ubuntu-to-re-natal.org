#+TITLE: Clean Install of Ubuntu to Re-natal
#
#
#

Published: /November 13, 2016/

** Intro

*Goal*: Share how to set up [[https://github.com/drapanjanas/re-natal][re-natal]] v0.3.x (i.e., cljs + reagent +
re-frame + figwheel + react-native) on Ubuntu 16.04 LTS for android
application development.

Requirements:

- Clean install of Ubuntu 16.04 (*not* in a VM)
- 25 GB of disk space (with everything installed, I used 21.8 GB of disk space)
- 16 GB of RAM (with everything running, I used 8.4 GB of RAM)

Special Note:

Please consider this post a living document. If updates/corrections
need to be made, please submit a PR against [[https://github.com/gadfly361/gadfly-blog/blob/master/posts/2016-11-13-clean-install-of-ubuntu-to-re-natal.org][this file]].

** Post

*** Step 1: Install Chrome

Get the debian package.

#+BEGIN_SRC shell
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
#+END_SRC

And install it.

#+BEGIN_SRC shell
sudo dpkg -i --force-depends google-chrome-stable_current_amd64.deb
sudo apt-get install -f -y
rm google-chrome-stable_current_amd64.deb
#+END_SRC

To verify that you have chrome installed.

#+BEGIN_SRC shell
google-chrome --version
#+END_SRC

Should produce something like: =Google Chrome 53.0.2785.116=. To see
chrome in your launcher, you may have to log out and log back in
again.

*** Step 2: Install Java

#+BEGIN_SRC shell
sudo apt-get install -y openjdk-8-jdk
#+END_SRC

To verify that you have java installed.

#+BEGIN_SRC shell
java -version
#+END_SRC

*** Step 3: Install Leiningen

#+BEGIN_SRC shell
wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
chmod a+x lein
sudo mv lein /usr/local/bin/
lein
#+END_SRC

To verify that you have lein installed.

#+BEGIN_SRC shell
lein -v
#+END_SRC

*** Step 4: Install Git

#+BEGIN_SRC shell
sudo apt-get install -y git
#+END_SRC

To verify that you have git installed.

#+BEGIN_SRC shell
node --version
#+END_SRC

*** Step 5: Install Node

#+BEGIN_SRC shell
curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -
sudo apt-get install -y nodejs
#+END_SRC

To verify that you have node installed.

#+BEGIN_SRC shell
node -v
#+END_SRC

*** Step 6: Install React Native

#+BEGIN_SRC shell
sudo npm install -g react-native-cli
#+END_SRC

*** Step 7: Install Re-natal

#+BEGIN_SRC shell
sudo npm install -g re-natal
#+END_SRC

*** Step 8: Install Watchman

Prerequisites.

#+BEGIN_SRC shell
sudo apt-get install -y automake
sudo apt-get install -y python-dev
#+END_SRC

Install watchman.

#+BEGIN_SRC shell
git clone https://github.com/facebook/watchman.git
cd watchman
git checkout v4.1.0  # the latest stable release
./autogen.sh
./configure
make
sudo make install
#+END_SRC

Post install.

#+BEGIN_SRC shell
echo 256 | sudo tee -a /proc/sys/fs/inotify/max_user_instances
echo 32768 | sudo tee -a /proc/sys/fs/inotify/max_queued_events
echo 65536 | sudo tee -a /proc/sys/fs/inotify/max_user_watches
watchman shutdown-server
#+END_SRC

To verify that you have watchman installed.

#+BEGIN_SRC shell
watchman -v
#+END_SRC

*** Step 9: Download android studio

Download some 32 bit stuff.

#+BEGIN_SRC shell
sudo apt-get install -y libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1
#+END_SRC

Download android studio [[https://developer.android.com/studio/index.html][here]], and unzip it. Note, your version may vary.

#+BEGIN_SRC shell
unzip android-studio-ide-145.3360264-linux.zip
#+END_SRC

Run android studio:

#+BEGIN_SRC shell
cd android-studio/bin/ && ./studio.sh
#+END_SRC

Select =I do not have a previous version of Studio or I do not want to
import my settings.= and then click =Ok=.

A welcome page will appear, click =Next=.

For install type, choose =Standard=, then click =Next= until you get
to =Finish= and click that. A bunch of things will get installed, then
click =Finish= again.

----------

At this point, you should see the standard welcome screen when you
launch Android Studio. At the bottom, click =configure=, then click =SDK Manager=. It should
open with =Andorid SDK= highlighted in the left bar. In the bottom
right, select =Show Package Details=. Select the following additional
options under *Android 6.0 (Marshmallow)*:

- Google APIs
- Android SDK Platform 23
- Sources for Android 23
- Intel x86 Atom System Image
- Intel x86 Atom_64 System Image
- Google APIs Intel x86 Atom System Image
- Google APIs Intel x86 Atom_64 System Image


Go to SDK Tools tab and select =Show Package Details=.  Under =Android
SDK Build-Tools=, select version 23.01.

Click =Apply=, confirm the change to install, accept the license
agreements, then click =Finish=. You can now close android studio.


Add the following lines to =~/.bashrc=.

#+BEGIN_SRC shell
echo export ANDROID_HOME=~/Android/Sdk
echo export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
#+END_SRC

Source your .bashrc file.

#+BEGIN_SRC shell
source ~/.bashrc 
#+END_SRC

*** Step 10: Install Virtualbox

#+BEGIN_SRC shell
sudo apt-get install -y virtualbox
#+END_SRC

*** Step 11: Install Genymotion

Go [[https://www.genymotion.com/][here]] and create a Genymotion account. Sign in, click the =Download=
link in the top banner, and then click the =Download for Ubuntu
(64bit) button=.

Make the file executable. Note, your version may vary.

#+BEGIN_SRC shell
chmod +x genymotion-2.8.0-linux_x64.bin
#+END_SRC

Run the file.

#+BEGIN_SRC shell
./genymotion-2.8.0-linux_x64.bin
#+END_SRC

When prompted, type =y= to install to the current directory or =n= to
install somewhere else.

cd into the genymotion directory that was created, and start up
genymotion.

#+BEGIN_SRC shell
cd genymotion
./genymotion
#+END_SRC

You will be prompted to create your first virtual device, click =yes=.
Next, click the =Sign In= link at the bottom right.

After signing in, select =Samsung Galaxy S6 - 6.0.0 - API 23 -
1440x2560= and create the virtual device. Click =Finish=.

You should return to a list of your devices.

Go to =Settings=, click on the =ADB= tab. Select 'Use custom Android SDK tools' and enter the path of your Android SDK, which should be something like =/home/<username>/Android/Sdk=.

*** Step 12: Create and run your first app
**** Create an app from the re-natal template.

#+BEGIN_SRC shell
re-natal init FutureApp
cd future-app
#+END_SRC

**** Start Genymotion (if it isn't already running)

#+BEGIN_SRC shell
./genymotion
#+END_SRC

**** Start a simulated android device

In Genymotion, select the device you made earlier and hit =Start=.

**** Prepare the app

In another terminal:

#+BEGIN_SRC shell
re-natal use-android-device genymotion
re-natal use-figwheel
#+END_SRC

**** Start figwheel

#+BEGIN_SRC shell
lein figwheel android
#+END_SRC

**** Start react-native

In another terminal:

#+BEGIN_SRC shell
react-native start
#+END_SRC

**** Run the app

In yet another terminal:

#+BEGIN_SRC shell
react-native run-android
#+END_SRC

**** Verify the figwheel REPL is connected to the simulated app

In the figwheel REPL type:

#+BEGIN_SRC clojure
(js/alert "Hello, world!")
#+END_SRC

You should see an alert pop-up in the simulated app.

**** Verify that you can debug remotely in a browser

In the simulated app, press =Ctrl + M=. Select =enable debug
remotely=, which should take you to =localhost:8081/debugger-ui=. Once
there press =Ctrl + Shift + J=, this should open the developer's
console.  In the figwheel REPL, type:

#+BEGIN_SRC clojure
(js/console.log "Hello, console!")
#+END_SRC

You should see the message printed to the developer's console.

** Thanks for Reading

If you have any questions, I can be reached in the #reagent channel of
the [[http://clojurians.net/][clojurians]] slack group.

Special Note:

Please consider this post a living document. If updates/corrections
need to be made, please submit a PR against [[https://github.com/gadfly361/gadfly-blog/blob/master/posts/2016-11-13-clean-install-of-ubuntu-to-re-natal.org][this file]].

#+BEGIN_HTML
- gadfly361 
<a href="https://twitter.com/gadfly361">
  <i class="twitter icon black large"></i>
</a>
<a href="https://github.com/gadfly361">
  <i class="github icon black large"></i>
</a>
#+END_HTML
