#+TITLE: d3 in reagent
#
#
#

Published: /October 22, 2016/

** Intro

- [[https://d3js.org][d3]] is an amazing visualization library written in javascript.
- [[https://github.com/reagent-project/reagent][Reagent]] is a clojurescript wrapper around facebook's [[https://facebook.github.io/react/][react]].

*Goal*: Share an example of a dynamic barchart that showcases how to
use d3's [[https://bl.ocks.org/mbostock/3808218][General Update Pattern]] with reagent's [[https://github.com/Day8/re-frame/wiki/Creating-Reagent-Components#form-3-a-class-with-life-cycle-methods][form-3]] component. Note,
detailing how to use d3 itself is *not* a goal.

*Intended Audience*: Intermediate clojurescript / d3 developers.

*[[https://gadfly361.github.io/gadfly-blog/demos/2016-10-22-d3-in-reagent/index.html][Demo]]*, *[[https://github.com/gadfly361/gadfly-blog/tree/master/code/2016-10-22-d3-in-reagent][Source]]*

** Post

For this post, we are going to start with [[https://github.com/gadfly361/reagent-cookbook-template][reagent-cookbook-template]],
which is useful for demonstration purposes. However, it is *not* a
good template for development (I'd recommend [[https://github.com/gadfly361/reagent-figwheel][reagent-figwheel]]
or [[https://github.com/Day8/re-frame-template][re-frame-template]] instead).

*** *Step 1*: Create application

#+BEGIN_SRC shell
lein new rc d3-in-reagent
#+END_SRC

You should see an output like this:

#+BEGIN_SRC shell
├── project.clj
├── resources
│   └── public
│       └── index.html
└── src
    └── cljs
        └── d3_in_reagent
            └── core.cljs
#+END_SRC

*** *Step 2*: Add d3 dependency to your project

There are [[https://github.com/lambdaisland/thirdpartyjs][several ways]] to add d3 to your project; we are going to use [[https://github.com/cljsjs/packages][cljsjs]].
Open =project.clj= and add d3 to the dependencies vector.

#+BEGIN_SRC clojure
  :dependencies [[org.clojure/clojure "1.7.0"]
                 [org.clojure/clojurescript "1.7.122"]
                 [reagent "0.5.1"]
                 [cljsjs/d3 "4.2.2-0"] ;; <-- ATTENTION
                 ]
#+END_SRC

Open =core.cljs= and require d3.

#+BEGIN_SRC clojure
(ns d3-in-reagent.core
  (:require
   [reagent.core :as reagent]
   [cljsjs.d3] ;; <-- ATTENTION
   ))
#+END_SRC

*** *Step 3*: Create SVG element

To make our barchart, we need to put an SVG element on our page.

#+BEGIN_SRC clojure
  (defn viz []
    [:div
     {:id "barchart"}

     [:svg
      {:width  300
       :height 240}]])


  (defn home []
    [:div
     [:h1 "Barchart"]
     [viz]])
#+END_SRC

At this point, run your application (=lein cljsbuild once prod=, and
then open =resources/public/index.html=) to verify that you have an
svg on the page. You should see:

#+BEGIN_SRC html
<svg width="300" height="240" data-reactid=".0.1.0"></svg>
#+END_SRC

*** *Step 4*: Make height and width dynamic

However, I do not like the statically defined height and width. From
experience, I have found that creating functions to generate the
height and width works well for making responsive visualizations.

#+BEGIN_SRC clojure
  (defonce app-state
    (reagent/atom
     {:width 300}))


  (defn get-width [ratom]
    (:width @ratom))

  (defn get-height [ratom]
    (let [width (get-width ratom)]
      (* 0.8 width)))


  (defn viz [ratom]
    (let [width  (get-width ratom)
          height (get-height ratom)]
      [:div
       {:id "barchart"}

       [:svg
        {:width  width
         :height height}]]))
#+END_SRC

We can test this out by creating a toggle-width button.

#+BEGIN_SRC clojure
  (defn btn-toggle-width [ratom]
    [:div
     [:button
      {:on-click #(swap! ratom update
                         :width (fn [width]
                                  (if (= 300 width) 500 300)))}
      "Toggle width"]])

  (defn home []
    [:div
     [:h1 "Barchart"]
     [btn-toggle-width app-state]
     [viz app-state]
     ])
#+END_SRC

If you click the button, the svg should toggle between:

#+BEGIN_SRC html
<svg width="300" height="240" data-reactid=".0.2.0"></svg>
#+END_SRC

#+BEGIN_SRC html
<svg width="500" height="400" data-reactid=".0.2.0"></svg>
#+END_SRC

*** *Step 5*: Create a containing 'g' element

Now that we have a dynamically sized svg element, let's add stuff to
it! To start, we can add a simple =g= element to act as a container
for other svg elements.

#+BEGIN_SRC shell
svg
└── g.container
#+END_SRC

*Pause*

Ok, I lied. It isn't going to be all that simple. If you haven't done
so, familiarize yourself with d3's [[https://bl.ocks.org/mbostock/3808218][General Update Pattern]] and
reagent's [[https://github.com/Day8/re-frame/wiki/Creating-Reagent-Components#form-3-a-class-with-life-cycle-methods][form-3]] component.

From the d3 world, we care about:

- =enter -> update -> exit=

From the reagent/react world, we care about:

- =reagent-render -> component-did-mount -> component-did-update=

Since we are working with two different worlds, I recommend enforcing
a strict naming convention:

- d3 world: *-enter, *-update, *-exit
- reagent/react world: *-render, *-did-mount, *-did-update

#+BEGIN_SRC clojure
(defn container-enter [ratom]
  (-> (js/d3.select "#barchart svg")
      (.append "g")
      (.attr "class" "container")))

(defn container-did-mount [ratom]
  (container-enter ratom))
#+END_SRC

#+BEGIN_SRC clojure
(defn viz-render [ratom]
  (let [width  (get-width ratom)
        height (get-height ratom)]
    [:div
     {:id "barchart"}

     [:svg
      {:width  width
       :height height}]]))

(defn viz-did-mount [ratom]
  (container-did-mount ratom))

(defn viz [ratom]
  (reagent/create-class
   {:reagent-render      #(viz-render ratom)
    :component-did-mount #(viz-did-mount ratom)}))
#+END_SRC

Let's recap the order of events between d3 and reagent.

1. =viz= component calls its render function, =viz-render=
   - places svg element on the DOM
2. =viz= component calls its did-mount function, =viz-did-mount=
   - =viz-did-mount= calls =container-did-mount=
   - =container-did-mount= calls =container-enter=
   - =container-enter= grabs the svg element and appends a =g= element.

*** *Step 6*: Add bars

Let's add some data that we can use to generate the bars in our chart.

#+BEGIN_SRC clojure
  (defonce app-state
    (reagent/atom
     {:width 300
      :data  [{:x 1}
              {:x 2}
              {:x 3}]}))

  (defn get-data [ratom]
    (:data @ratom))
#+END_SRC

Next, let's add the bars to our svg with the previously discussed
naming convention. By the end, our svg structure will look like this.

#+BEGIN_SRC shell
svg
└── g.container
    └── g.bars
        └── rect
        └── rect
        └── rect
#+END_SRC

/Note: Since this is not a d3 tutorial, I am making the assumption
that the d3 bits below make sense./

#+BEGIN_SRC clojure
(defn bars-enter [ratom]
  (let [data (get-data ratom)]
    (-> (js/d3.select "#barchart svg .container .bars")
        (.selectAll "rect")
        (.data (clj->js data))
        .enter
        (.append "rect"))))

(defn bars-update [ratom]
  (let [width   (get-width ratom)
        height  (get-height ratom)
        data    (get-data ratom)
        data-n  (count data)
        rect-height (/ height data-n)
        x-scale (-> js/d3
                    .scaleLinear
                    (.domain #js [0 5])
                    (.range #js [0 width]))]
    (-> (js/d3.select "#barchart svg .container .bars")
        (.selectAll "rect")
        (.data (clj->js data))
        (.attr "fill" "green")
        (.attr "x" (x-scale 0))
        (.attr "y" (fn [_ i]
                     (* i rect-height)))
        (.attr "height" (- rect-height 1))
        (.attr "width" (fn [d]
                         (x-scale (aget d "x")))))))

(defn bars-exit [ratom]
  (let [data (get-data ratom)]
    (-> (js/d3.select "#barchart svg .container .bars")
        (.selectAll "rect")
        (.data (clj->js data))
        .exit
        .remove)))


(defn bars-did-update [ratom]
  (bars-enter ratom)
  (bars-update ratom)
  (bars-exit ratom))

(defn bars-did-mount [ratom]
  (-> (js/d3.select "#barchart svg .container")
      (.append "g")
      (.attr "class" "bars"))
  (bars-did-update ratom))
#+END_SRC

Hopefully, at this point the separation of the d3 world, and the
reagent/react world is clear.

d3 world:

- bars-enter
- bars-update
- bars-exit

reagent/react world:

- bars-did-update
- bars-did-mount

It should be noted that =bars-did-update= and =bars-did-mount= are
/almost/ the same. However, the difference is important to
understand. =bars-did-mount= will only ever be called once, right
after the component has mounted. =bars-did-update= will be called on
every subsequent render of our component.  If we had placed the
following:

#+BEGIN_SRC clojure
  (-> (js/d3.select "#barchart svg .container")
      (.append "g")
      (.attr "class" "bars"))
#+END_SRC

inside of =bars-did-update=, we would have created a *new* =g= element
every time the component updated ... eek!


Now we can add the bars to our svg, as follows.

#+BEGIN_SRC clojure
  (defn viz-did-mount [ratom]
    ;; order matters here
    (container-did-mount ratom)
    (bars-did-mount ratom))

  (defn viz-did-update [ratom]
    (bars-did-update ratom))

  (defn viz [ratom]
    (reagent/create-class
     {:reagent-render       #(viz-render ratom)
      :component-did-mount  #(viz-did-mount ratom)
      :component-did-update #(viz-did-update ratom)}))
#+END_SRC

*** *Step 7*: Make bars dynamic

We have actually already written the code to make the bars dynamic!
However, to see it, let's add a button that will create random data.

#+BEGIN_SRC clojure
(defn randomize-data [ratom]
  (let [points-n (max 2 (rand-int 8))
        points   (range points-n)
        create-x (fn [] (max 1 (rand-int 5)))]
    (swap! ratom update :data
           (fn []
             (mapv #(hash-map :x (create-x))
                   points)))))

(defn btn-randomize-data [ratom]
  [:div
   [:button
    {:on-click #(randomize-data ratom)}
    "Randomize data"]])
#+END_SRC

#+BEGIN_SRC clojure
(defn home []
  [:div
   [:h1 "Barchart"]
   [btn-toggle-width app-state]
   [btn-randomize-data app-state]
   [viz app-state]
   ])
#+END_SRC

** Thanks for Reading

*[[https://gadfly361.github.io/gadfly-blog/demos/2016-10-22-d3-in-reagent/index.html][Demo]]*, *[[https://github.com/gadfly361/gadfly-blog/tree/master/code/2016-10-22-d3-in-reagent][Source]]*

If you have any questions, I can be reached in the #reagent channel of
the [[http://clojurians.net/][clojurians]] slack group.


#+BEGIN_HTML
- gadfly361 
<a href="https://twitter.com/gadfly361">
  <i class="twitter icon black large"></i>
</a>
<a href="https://github.com/gadfly361">
  <i class="github icon black large"></i>
</a>
#+END_HTML
