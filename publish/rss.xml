<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Gadfly Blog</title>
  <atom:link href="https://gadfly361.github.io/gadfly-blog/rss.xml" rel="self" type="application/rss+xml" />
  <link>https://gadfly361.github.io/gadfly-blog/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Sun, 13 Nov 2016 17:58:40 -0800</pubDate>
  <lastBuildDate>Sun, 13 Nov 2016 17:58:40 -0800</lastBuildDate>
  <generator>Emacs 24.5 Org-mode 8.3.6</generator>
  <webMaster>matthew@gadfly (matthew)</webMaster>
  <image>
    <url>http://orgmode.org/img/org-mode-unicorn-logo.png</url>
    <title>Gadfly Blog</title>
    <link>https://gadfly361.github.io/gadfly-blog/</link>
  </image>

  <item>
    <title>d3-in-reagent</title>
    <link>https://gadfly361.github.io/gadfly-blog/2016-10-22-d3-in-reagent.html</link>
    <author>matthew@gadfly (matthew)</author>
    <guid isPermaLink="false">https://gadfly361.github.io/gadfly-blog/2016-10-22-d3-in-reagent.html</guid>
    <pubDate>Sat, 22 Oct 2016 00:00:00 -0700</pubDate>

    <description><![CDATA[<p>
    Published: <i>October 22, 2016</i>
    </p>

    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1">Intro</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <ul class="org-ul">
    <li><a href="https://d3js.org/">d3</a> is an amazing visualization library written in javascript.</li>
    <li><a href="https://github.com/reagent-project/reagent">Reagent</a> is a clojurescript wrapper around facebook's <a href="https://facebook.github.io/react/">react</a>.</li>
    </ul>

    <p>
    <b>Goal</b>: Share an example of a dynamic barchart that showcases how to
    use d3's <a href="https://bl.ocks.org/mbostock/3808218">General Update Pattern</a> with reagent's <a href="https://github.com/Day8/re-frame/wiki/Creating-Reagent-Components#form-3-a-class-with-life-cycle-methods">form-3</a> component. Note,
    detailing how to use d3 itself is <b>not</b> a goal.
    </p>

    <p>
    <b>Intended Audience</b>: Intermediate clojurescript / d3 developers.
    </p>

    <p>
    <b><a href="https://gadfly361.github.io/gadfly-blog/demos/2016-10-22-d3-in-reagent/index.html">Demo</a></b>, <b><a href="https://github.com/gadfly361/gadfly-blog/tree/master/code/2016-10-22-d3-in-reagent">Source</a></b>
    </p>
    </div>
    </div>

    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1">Post</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    For this post, we are going to start with <a href="https://github.com/gadfly361/reagent-cookbook-template">reagent-cookbook-template</a>,
    which is useful for demonstration purposes. However, it is <b>not</b> a
    good template for development (I'd recommend <a href="https://github.com/gadfly361/reagent-figwheel">reagent-figwheel</a>
    or <a href="https://github.com/Day8/re-frame-template">re-frame-template</a> instead).
    </p>
    </div>

    <div id="outline-container-orgheadline2" class="outline-4">
    <h4 id="orgheadline2"><b>Step 1</b>: Create application</h4>
    <div class="outline-text-4" id="text-orgheadline2">
    <div class="org-src-container">

    <pre><code class="hljs shell">lein new rc d3-in-reagent
    </code></pre>
    </div>

    <p>
    You should see an output like this:
    </p>

    <div class="org-src-container">

    <pre><code class="hljs shell">├── project.clj
    ├── resources
    │   └── public
    │       └── index.html
    └── src
    └── cljs
    └── d3_in_reagent
    └── core.cljs
    </code></pre>
    </div>
    </div>
    </div>

    <div id="outline-container-orgheadline3" class="outline-4">
    <h4 id="orgheadline3"><b>Step 2</b>: Add d3 dependency to your project</h4>
    <div class="outline-text-4" id="text-orgheadline3">
    <p>
    There are <a href="https://github.com/lambdaisland/thirdpartyjs">several ways</a> to add d3 to your project; we are going to use <a href="https://github.com/cljsjs/packages">cljsjs</a>.
    Open <code>project.clj</code> and add d3 to the dependencies vector.
    </p>

    <div class="org-src-container">

    <pre><code class="hljs clojure">:dependencies [[org.clojure/clojure "1.7.0"]
    [org.clojure/clojurescript "1.7.122"]
    [reagent "0.5.1"]
    [cljsjs/d3 "4.2.2-0"] ;; &lt;-- ATTENTION
    ]
    </code></pre>
    </div>

    <p>
    Open <code>core.cljs</code> and require d3.
    </p>

    <div class="org-src-container">

    <pre><code class="hljs clojure">(ns d3-in-reagent.core
    (:require
    [reagent.core :as reagent]
    [cljsjs.d3] ;; &lt;-- ATTENTION
    ))
    </code></pre>
    </div>
    </div>
    </div>

    <div id="outline-container-orgheadline4" class="outline-4">
    <h4 id="orgheadline4"><b>Step 3</b>: Create SVG element</h4>
    <div class="outline-text-4" id="text-orgheadline4">
    <p>
    To make our barchart, we need to put an SVG element on our page.
    </p>

    <div class="org-src-container">

    <pre><code class="hljs clojure">(defn viz []
    [:div
    {:id "barchart"}

    [:svg
    {:width  300
    :height 240}]])


    (defn home []
    [:div
    [:h1 "Barchart"]
    [viz]])
    </code></pre>
    </div>

    <p>
    At this point, run your application (<code>lein cljsbuild once prod</code>, and
    then open <code>resources/public/index.html</code>) to verify that you have an
    svg on the page. You should see:
    </p>

    <div class="org-src-container">

    <pre><code class="hljs html">&lt;svg width="300" height="240" data-reactid=".0.1.0"&gt;&lt;/svg&gt;
    </code></pre>
    </div>
    </div>
    </div>

    <div id="outline-container-orgheadline5" class="outline-4">
    <h4 id="orgheadline5"><b>Step 4</b>: Make height and width dynamic</h4>
    <div class="outline-text-4" id="text-orgheadline5">
    <p>
    However, I do not like the statically defined height and width. From
    experience, I have found that creating functions to generate the
    height and width works well for making responsive visualizations.
    </p>

    <div class="org-src-container">

    <pre><code class="hljs clojure">(defonce app-state
    (reagent/atom
    {:width 300}))


    (defn get-width [ratom]
    (:width @ratom))

    (defn get-height [ratom]
    (let [width (get-width ratom)]
    (* 0.8 width)))


    (defn viz [ratom]
    (let [width  (get-width ratom)
    height (get-height ratom)]
    [:div
    {:id "barchart"}

    [:svg
    {:width  width
    :height height}]]))
    </code></pre>
    </div>

    <p>
    We can test this out by creating a toggle-width button.
    </p>

    <div class="org-src-container">

    <pre><code class="hljs clojure">(defn btn-toggle-width [ratom]
    [:div
    [:button
    {:on-click #(swap! ratom update
    :width (fn [width]
    (if (= 300 width) 500 300)))}
    "Toggle width"]])

    (defn home []
    [:div
    [:h1 "Barchart"]
    [btn-toggle-width app-state]
    [viz app-state]
    ])
    </code></pre>
    </div>

    <p>
    If you click the button, the svg should toggle between:
    </p>

    <div class="org-src-container">

    <pre><code class="hljs html">&lt;svg width="300" height="240" data-reactid=".0.2.0"&gt;&lt;/svg&gt;
    </code></pre>
    </div>

    <div class="org-src-container">

    <pre><code class="hljs html">&lt;svg width="500" height="400" data-reactid=".0.2.0"&gt;&lt;/svg&gt;
    </code></pre>
    </div>
    </div>
    </div>

    <div id="outline-container-orgheadline6" class="outline-4">
    <h4 id="orgheadline6"><b>Step 5</b>: Create a containing 'g' element</h4>
    <div class="outline-text-4" id="text-orgheadline6">
    <p>
    Now that we have a dynamically sized svg element, let's add stuff to
    it! To start, we can add a simple <code>g</code> element to act as a container
    for other svg elements.
    </p>

    <div class="org-src-container">

    <pre><code class="hljs shell">svg
    └── g.container
    </code></pre>
    </div>

    <p>
    <b>Pause</b>
    </p>

    <p>
    Ok, I lied. It isn't going to be all that simple. If you haven't done
    so, familiarize yourself with d3's <a href="https://bl.ocks.org/mbostock/3808218">General Update Pattern</a> and
    reagent's <a href="https://github.com/Day8/re-frame/wiki/Creating-Reagent-Components#form-3-a-class-with-life-cycle-methods">form-3</a> component.
    </p>

    <p>
    From the d3 world, we care about:
    </p>

    <ul class="org-ul">
    <li><code>enter -&gt; update -&gt; exit</code></li>
    </ul>

    <p>
    From the reagent/react world, we care about:
    </p>

    <ul class="org-ul">
    <li><code>reagent-render -&gt; component-did-mount -&gt; component-did-update</code></li>
    </ul>

    <p>
    Since we are working with two different worlds, I recommend enforcing
    a strict naming convention:
    </p>

    <ul class="org-ul">
    <li>d3 world: *-enter, *-update, *-exit</li>
    <li>reagent/react world: *-render, *-did-mount, *-did-update</li>
    </ul>

    <div class="org-src-container">

    <pre><code class="hljs clojure">(defn container-enter [ratom]
    (-&gt; (js/d3.select "#barchart svg")
    (.append "g")
    (.attr "class" "container")))

    (defn container-did-mount [ratom]
    (container-enter ratom))
    </code></pre>
    </div>

    <div class="org-src-container">

    <pre><code class="hljs clojure">(defn viz-render [ratom]
    (let [width  (get-width ratom)
    height (get-height ratom)]
    [:div
    {:id "barchart"}

    [:svg
    {:width  width
    :height height}]]))

    (defn viz-did-mount [ratom]
    (container-did-mount ratom))

    (defn viz [ratom]
    (reagent/create-class
    {:reagent-render      #(viz-render ratom)
    :component-did-mount #(viz-did-mount ratom)}))
    </code></pre>
    </div>

    <p>
    Let's recap the order of events between d3 and reagent.
    </p>

    <ol class="org-ol">
    <li><code>viz</code> component calls its render function, <code>viz-render</code>
    <ul class="org-ul">
    <li>places svg element on the DOM</li>
    </ul></li>
    <li><code>viz</code> component calls its did-mount function, <code>viz-did-mount</code>
    <ul class="org-ul">
    <li><code>viz-did-mount</code> calls <code>container-did-mount</code></li>
    <li><code>container-did-mount</code> calls <code>container-enter</code></li>
    <li><code>container-enter</code> grabs the svg element and appends a <code>g</code> element.</li>
    </ul></li>
    </ol>
    </div>
    </div>

    <div id="outline-container-orgheadline7" class="outline-4">
    <h4 id="orgheadline7"><b>Step 6</b>: Add bars</h4>
    <div class="outline-text-4" id="text-orgheadline7">
    <p>
    Let's add some data that we can use to generate the bars in our chart.
    </p>

    <div class="org-src-container">

    <pre><code class="hljs clojure">(defonce app-state
    (reagent/atom
    {:width 300
    :data  [{:x 1}
    {:x 2}
    {:x 3}]}))

    (defn get-data [ratom]
    (:data @ratom))
    </code></pre>
    </div>

    <p>
    Next, let's add the bars to our svg with the previously discussed
    naming convention. By the end, our svg structure will look like this.
    </p>

    <div class="org-src-container">

    <pre><code class="hljs shell">svg
    └── g.container
    └── g.bars
    └── rect
    └── rect
    └── rect
    </code></pre>
    </div>

    <p>
    <i>Note: Since this is not a d3 tutorial, I am making the assumption
    that the d3 bits below make sense.</i>
    </p>

    <div class="org-src-container">

    <pre><code class="hljs clojure">(defn bars-enter [ratom]
    (let [data (get-data ratom)]
    (-&gt; (js/d3.select "#barchart svg .container .bars")
    (.selectAll "rect")
    (.data (clj-&gt;js data))
    .enter
    (.append "rect"))))

    (defn bars-update [ratom]
    (let [width   (get-width ratom)
    height  (get-height ratom)
    data    (get-data ratom)
    data-n  (count data)
    rect-height (/ height data-n)
    x-scale (-&gt; js/d3
    .scaleLinear
    (.domain #js [0 5])
    (.range #js [0 width]))]
    (-&gt; (js/d3.select "#barchart svg .container .bars")
    (.selectAll "rect")
    (.data (clj-&gt;js data))
    (.attr "fill" "green")
    (.attr "x" (x-scale 0))
    (.attr "y" (fn [_ i]
    (* i rect-height)))
    (.attr "height" (- rect-height 1))
    (.attr "width" (fn [d]
    (x-scale (aget d "x")))))))

    (defn bars-exit [ratom]
    (let [data (get-data ratom)]
    (-&gt; (js/d3.select "#barchart svg .container .bars")
    (.selectAll "rect")
    (.data (clj-&gt;js data))
    .exit
    .remove)))


    (defn bars-did-update [ratom]
    (bars-enter ratom)
    (bars-update ratom)
    (bars-exit ratom))

    (defn bars-did-mount [ratom]
    (-&gt; (js/d3.select "#barchart svg .container")
    (.append "g")
    (.attr "class" "bars"))
    (bars-did-update ratom))
    </code></pre>
    </div>

    <p>
    Hopefully, at this point the separation of the d3 world, and the
    reagent/react world is clear.
    </p>

    <p>
    d3 world:
    </p>

    <ul class="org-ul">
    <li>bars-enter</li>
    <li>bars-update</li>
    <li>bars-exit</li>
    </ul>

    <p>
    reagent/react world:
    </p>

    <ul class="org-ul">
    <li>bars-did-update</li>
    <li>bars-did-mount</li>
    </ul>

    <p>
    It should be noted that <code>bars-did-update</code> and <code>bars-did-mount</code> are
    <i>almost</i> the same. However, the difference is important to
    understand. <code>bars-did-mount</code> will only ever be called once, right
    after the component has mounted. <code>bars-did-update</code> will be called on
    every subsequent render of our component.  If we had placed the
    following:
    </p>

    <div class="org-src-container">

    <pre><code class="hljs clojure">(-&gt; (js/d3.select "#barchart svg .container")
    (.append "g")
    (.attr "class" "bars"))
    </code></pre>
    </div>

    <p>
    inside of <code>bars-did-update</code>, we would have created a <b>new</b> <code>g</code> element
    every time the component updated &#x2026; eek!
    </p>


    <p>
    Now we can add the bars to our svg, as follows.
    </p>

    <div class="org-src-container">

    <pre><code class="hljs clojure">(defn viz-did-mount [ratom]
    ;; order matters here
    (container-did-mount ratom)
    (bars-did-mount ratom))

    (defn viz-did-update [ratom]
    (bars-did-update ratom))

    (defn viz [ratom]
    (reagent/create-class
    {:reagent-render       #(viz-render ratom)
    :component-did-mount  #(viz-did-mount ratom)
    :component-did-update #(viz-did-update ratom)}))
    </code></pre>
    </div>
    </div>
    </div>

    <div id="outline-container-orgheadline8" class="outline-4">
    <h4 id="orgheadline8"><b>Step 7</b>: Make bars dynamic</h4>
    <div class="outline-text-4" id="text-orgheadline8">
    <p>
    We have actually already written the code to make the bars dynamic!
    However, to see it, let's add a button that will create random data.
    </p>

    <div class="org-src-container">

    <pre><code class="hljs clojure">(defn randomize-data [ratom]
    (let [points-n (max 2 (rand-int 8))
    points   (range points-n)
    create-x (fn [] (max 1 (rand-int 5)))]
    (swap! ratom update :data
    (fn []
    (mapv #(hash-map :x (create-x))
    points)))))

    (defn btn-randomize-data [ratom]
    [:div
    [:button
    {:on-click #(randomize-data ratom)}
    "Randomize data"]])
    </code></pre>
    </div>

    <div class="org-src-container">

    <pre><code class="hljs clojure">(defn home []
    [:div
    [:h1 "Barchart"]
    [btn-toggle-width app-state]
    [btn-randomize-data app-state]
    [viz app-state]
    ])
    </code></pre>
    </div>
    </div>
    </div>
    </div>

    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1">Thanks for Reading</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    <b><a href="https://gadfly361.github.io/gadfly-blog/demos/2016-10-22-d3-in-reagent/index.html">Demo</a></b>, <b><a href="https://github.com/gadfly361/gadfly-blog/tree/master/code/2016-10-22-d3-in-reagent">Source</a></b>
    </p>

    <p>
    If you have any questions, I can be reached in the #reagent channel of
    the <a href="http://clojurians.net/">clojurians</a> slack group.
    </p>


    - gadfly361 
    <a href="https://twitter.com/gadfly361">
    <i class="twitter icon black large"></i>
    </a>
    <a href="https://github.com/gadfly361">
    <i class="github icon black large"></i>
    </a>
    </div>
    </div>
    ]]></description>
</item>
<item>
  <title>clean-install-of-ubuntu-to-re-natal</title>
  <link>https://gadfly361.github.io/gadfly-blog/2016-10-22-d3-in-reagent.html</link>
  <author>matthew@gadfly (matthew)</author>
  <guid isPermaLink="false">https://gadfly361.github.io/gadfly-blog/2016-10-22-d3-in-reagent.html</guid>
  <pubDate>Sat, 22 Oct 2016 00:00:00 -0700</pubDate>

  <description><![CDATA[<p>
  Published: <i>November 13, 2016</i>
  </p>

  <div id="outline-container-orgheadline2" class="outline-3">
  <h3 id="orgheadline2">Intro</h3>
  <div class="outline-text-3" id="text-orgheadline2">
  <p>
  <b>Goal</b>: Share how to set up <a href="https://github.com/drapanjanas/re-natal">re-natal</a> v0.3.x (i.e., cljs + reagent +
  re-frame + figwheel + react-native) on Ubuntu 16.04 LTS for android
  application development.
  </p>

  <p>
  Requirements:
  </p>

  <ul class="org-ul">
  <li>Clean install of Ubuntu 16.04 (<b>not</b> in a VM)</li>
  <li>25 GB of disk space (with everything installed, I used 21.8 GB of disk space)</li>
  <li>16 GB of RAM (with everything running, I used 8.4 GB of RAM)</li>
  </ul>

  <p>
  Special Note:
  </p>

  <p>
  Please consider this post a living document. If updates/corrections
  need to be made, please submit a PR against <a href="https://github.com/gadfly361/gadfly-blog/blob/master/posts/2016-11-13-clean-install-of-ubuntu-to-re-natal.org">this file</a>.
  </p>
  </div>
  </div>

  <div id="outline-container-orgheadline24" class="outline-3">
  <h3 id="orgheadline24">Post</h3>
  <div class="outline-text-3" id="text-orgheadline24">
  </div><div id="outline-container-orgheadline3" class="outline-4">
  <h4 id="orgheadline3">Step 1: Install Chrome</h4>
  <div class="outline-text-4" id="text-orgheadline3">
  <p>
  Get the debian package.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
  </code></pre>
  </div>

  <p>
  And install it.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">sudo dpkg -i --force-depends google-chrome-stable_current_amd64.deb
  sudo apt-get install -f -y
  rm google-chrome-stable_current_amd64.deb
  </code></pre>
  </div>

  <p>
  To verify that you have chrome installed.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">google-chrome --version
  </code></pre>
  </div>

  <p>
  Should produce something like: <code>Google Chrome 53.0.2785.116</code>. To see
  chrome in your launcher, you may have to log out and log back in
  again.
  </p>
  </div>
  </div>

  <div id="outline-container-orgheadline4" class="outline-4">
  <h4 id="orgheadline4">Step 2: Install Java</h4>
  <div class="outline-text-4" id="text-orgheadline4">
  <div class="org-src-container">

  <pre><code class="hljs shell">sudo apt-get install -y openjdk-8-jdk
  </code></pre>
  </div>

  <p>
  To verify that you have java installed.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">java -version
  </code></pre>
  </div>
  </div>
  </div>

  <div id="outline-container-orgheadline5" class="outline-4">
  <h4 id="orgheadline5">Step 3: Install Leiningen</h4>
  <div class="outline-text-4" id="text-orgheadline5">
  <div class="org-src-container">

  <pre><code class="hljs shell">wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
  chmod a+x lein
  sudo mv lein /usr/local/bin/
  lein
  </code></pre>
  </div>

  <p>
  To verify that you have lein installed.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">lein -v
  </code></pre>
  </div>
  </div>
  </div>

  <div id="outline-container-orgheadline6" class="outline-4">
  <h4 id="orgheadline6">Step 4: Install Git</h4>
  <div class="outline-text-4" id="text-orgheadline6">
  <div class="org-src-container">

  <pre><code class="hljs shell">sudo apt-get install -y git
  </code></pre>
  </div>

  <p>
  To verify that you have git installed.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">node --version
  </code></pre>
  </div>
  </div>
  </div>

  <div id="outline-container-orgheadline7" class="outline-4">
  <h4 id="orgheadline7">Step 5: Install Node</h4>
  <div class="outline-text-4" id="text-orgheadline7">
  <div class="org-src-container">

  <pre><code class="hljs shell">curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -
  sudo apt-get install -y nodejs
  </code></pre>
  </div>

  <p>
  To verify that you have node installed.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">node -v
  </code></pre>
  </div>
  </div>
  </div>

  <div id="outline-container-orgheadline8" class="outline-4">
  <h4 id="orgheadline8">Step 6: Install React Native</h4>
  <div class="outline-text-4" id="text-orgheadline8">
  <div class="org-src-container">

  <pre><code class="hljs shell">sudo npm install -g react-native-cli
  </code></pre>
  </div>
  </div>
  </div>

  <div id="outline-container-orgheadline9" class="outline-4">
  <h4 id="orgheadline9">Step 7: Install Re-natal</h4>
  <div class="outline-text-4" id="text-orgheadline9">
  <div class="org-src-container">

  <pre><code class="hljs shell">sudo npm install -g re-natal
  </code></pre>
  </div>
  </div>
  </div>

  <div id="outline-container-orgheadline10" class="outline-4">
  <h4 id="orgheadline10">Step 8: Install Watchman</h4>
  <div class="outline-text-4" id="text-orgheadline10">
  <p>
  Prerequisites.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">sudo apt-get install -y automake
  sudo apt-get install -y python-dev
  </code></pre>
  </div>

  <p>
  Install watchman.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">git clone https://github.com/facebook/watchman.git
  cd watchman
  git checkout v4.1.0  # the latest stable release
  ./autogen.sh
  ./configure
  make
  sudo make install
  </code></pre>
  </div>

  <p>
  Post install.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">echo 256 | sudo tee -a /proc/sys/fs/inotify/max_user_instances
  echo 32768 | sudo tee -a /proc/sys/fs/inotify/max_queued_events
  echo 65536 | sudo tee -a /proc/sys/fs/inotify/max_user_watches
  watchman shutdown-server
  </code></pre>
  </div>

  <p>
  To verify that you have watchman installed.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">watchman -v
  </code></pre>
  </div>
  </div>
  </div>

  <div id="outline-container-orgheadline11" class="outline-4">
  <h4 id="orgheadline11">Step 9: Download android studio</h4>
  <div class="outline-text-4" id="text-orgheadline11">
  <p>
  Download some 32 bit stuff.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">sudo apt-get install -y libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1
  </code></pre>
  </div>

  <p>
  Download android studio <a href="https://developer.android.com/studio/index.html">here</a>, and unzip it. Note, your version may vary.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">unzip android-studio-ide-145.3360264-linux.zip
  </code></pre>
  </div>

  <p>
  Run android studio:
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">cd android-studio/bin/ &amp;&amp; ./studio.sh
  </code></pre>
  </div>

  <p>
  Select <code>I do not have a previous version of Studio or I do not want to
  import my settings.</code> and then click <code>Ok</code>.
  </p>

  <p>
  A welcome page will appear, click <code>Next</code>.
  </p>

  <p>
  For install type, choose <code>Standard</code>, then click <code>Next</code> until you get
  to <code>Finish</code> and click that. A bunch of things will get installed, then
  click <code>Finish</code> again.
  </p>

  <hr  />

  <p>
  At this point, you should see the standard welcome screen when you
  launch Android Studio. At the bottom, click <code>configure</code>, then click <code>SDK Manager</code>. It should
  open with <code>Andorid SDK</code> highlighted in the left bar. In the bottom
  right, select <code>Show Package Details</code>. Select the following additional
  options under <b>Android 6.0 (Marshmallow)</b>:
  </p>

  <ul class="org-ul">
  <li>Google APIs</li>
  <li>Android SDK Platform 23</li>
  <li>Sources for Android 23</li>
  <li>Intel x86 Atom System Image</li>
  <li>Intel x86 Atom<sub>64</sub> System Image</li>
  <li>Google APIs Intel x86 Atom System Image</li>
  <li>Google APIs Intel x86 Atom<sub>64</sub> System Image</li>
  </ul>


  <p>
  Go to SDK Tools tab and select <code>Show Package Details</code>.  Under <code>Android
  SDK Build-Tools</code>, select version 23.01.
  </p>

  <p>
  Click <code>Apply</code>, confirm the change to install, accept the license
  agreements, then click <code>Finish</code>. You can now close android studio.
  </p>


  <p>
  Add the following lines to <code>~/.bashrc</code>.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">echo export ANDROID_HOME=~/Android/Sdk
  echo export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
  </code></pre>
  </div>

  <p>
  Source your .bashrc file.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">source ~/.bashrc
  </code></pre>
  </div>
  </div>
  </div>

  <div id="outline-container-orgheadline12" class="outline-4">
  <h4 id="orgheadline12">Step 10: Install Virtualbox</h4>
  <div class="outline-text-4" id="text-orgheadline12">
  <div class="org-src-container">

  <pre><code class="hljs shell">sudo apt-get install -y virtualbox
  </code></pre>
  </div>
  </div>
  </div>

  <div id="outline-container-orgheadline13" class="outline-4">
  <h4 id="orgheadline13">Step 11: Install Genymotion</h4>
  <div class="outline-text-4" id="text-orgheadline13">
  <p>
  Go <a href="https://www.genymotion.com/">here</a> and create a Genymotion account. Sign in, click the <code>Download</code>
  link in the top banner, and then click the <code>Download for Ubuntu
  (64bit) button</code>.
  </p>

  <p>
  Make the file executable. Note, your version may vary.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">chmod +x genymotion-2.8.0-linux_x64.bin
  </code></pre>
  </div>

  <p>
  Run the file.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">./genymotion-2.8.0-linux_x64.bin
  </code></pre>
  </div>

  <p>
  When prompted, type <code>y</code> to install to the current directory or <code>n</code> to
  install somewhere else.
  </p>

  <p>
  cd into the genymotion directory that was created, and start up
  genymotion.
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">cd genymotion
  ./genymotion
  </code></pre>
  </div>

  <p>
  You will be prompted to create your first virtual device, click <code>yes</code>.
  Next, click the <code>Sign In</code> link at the bottom right.
  </p>

  <p>
  After signing in, select <code>Samsung Galaxy S6 - 6.0.0 - API 23 -
  1440x2560</code> and create the virtual device. Click <code>Finish</code>.
  </p>

  <p>
  You should return to a list of your devices.
  </p>

  <p>
  Go to <code>Settings</code>, click on the <code>ADB</code> tab. Select 'Use custom Android SDK tools' and enter the path of your Android SDK, which should be something like <code>/home/&lt;username&gt;/Android/Sdk</code>.
  </p>
  </div>
  </div>

  <div id="outline-container-orgheadline23" class="outline-4">
  <h4 id="orgheadline23">Step 12: Create and run your first app</h4>
  <div class="outline-text-4" id="text-orgheadline23">
  </div><ul class="org-ul"><li><a id="orgheadline14"></a>Create an app from the re-natal template.<br  /><div class="outline-text-5" id="text-orgheadline14">
  <div class="org-src-container">

  <pre><code class="hljs shell">re-natal init FutureApp
  cd future-app
  </code></pre>
  </div>
  </div></li>

  <li><a id="orgheadline15"></a>Start Genymotion (if it isn't already running)<br  /><div class="outline-text-5" id="text-orgheadline15">
  <div class="org-src-container">

  <pre><code class="hljs shell">./genymotion
  </code></pre>
  </div>
  </div></li>

  <li><a id="orgheadline16"></a>Start a simulated android device<br  /><div class="outline-text-5" id="text-orgheadline16">
  <p>
  In Genymotion, select the device you made earlier and hit <code>Start</code>.
  </p>
  </div></li>

  <li><a id="orgheadline17"></a>Prepare the app<br  /><div class="outline-text-5" id="text-orgheadline17">
  <p>
  In another terminal:
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">re-natal use-android-device genymotion
  re-natal use-figwheel
  </code></pre>
  </div>
  </div></li>

  <li><a id="orgheadline18"></a>Start figwheel<br  /><div class="outline-text-5" id="text-orgheadline18">
  <div class="org-src-container">

  <pre><code class="hljs shell">lein figwheel android
  </code></pre>
  </div>
  </div></li>

  <li><a id="orgheadline19"></a>Start react-native<br  /><div class="outline-text-5" id="text-orgheadline19">
  <p>
  In another terminal:
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">react-native start
  </code></pre>
  </div>
  </div></li>

  <li><a id="orgheadline20"></a>Run the app<br  /><div class="outline-text-5" id="text-orgheadline20">
  <p>
  In yet another terminal:
  </p>

  <div class="org-src-container">

  <pre><code class="hljs shell">react-native run-android
  </code></pre>
  </div>
  </div></li>

  <li><a id="orgheadline21"></a>Verify the figwheel REPL is connected to the simulated app<br  /><div class="outline-text-5" id="text-orgheadline21">
  <p>
  In the figwheel REPL type:
  </p>

  <div class="org-src-container">

  <pre><code class="hljs clojure">(js/alert "Hello, world!")
  </code></pre>
  </div>

  <p>
  You should see an alert pop-up in the simulated app.
  </p>
  </div></li>

  <li><a id="orgheadline22"></a>Verify that you can debug remotely in a browser<br  /><div class="outline-text-5" id="text-orgheadline22">
  <p>
  In the simulated app, press <code>Ctrl + M</code>. Select <code>enable debug
  remotely</code>, which should take you to <code>localhost:8081/debugger-ui</code>. Once
  there press <code>Ctrl + Shift + J</code>, this should open the developer's
  console.  In the figwheel REPL, type:
  </p>

  <div class="org-src-container">

  <pre><code class="hljs clojure">(js/console.log "Hello, console!")
  </code></pre>
  </div>

  <p>
  You should see the message printed to the developer's console.
  </p>
  </div></li></ul>
  </div>
  </div>

  <div id="outline-container-orgheadline25" class="outline-3">
  <h3 id="orgheadline25">Thanks for Reading</h3>
  <div class="outline-text-3" id="text-orgheadline25">
  <p>
  If you have any questions, I can be reached in the #reagent channel of
  the <a href="http://clojurians.net/">clojurians</a> slack group.
  </p>

  <p>
  Special Note:
  </p>

  <p>
  Please consider this post a living document. If updates/corrections
  need to be made, please submit a PR against <a href="https://github.com/gadfly361/gadfly-blog/blob/master/posts/2016-11-13-clean-install-of-ubuntu-to-re-natal.org">this file</a>.
  </p>

  - gadfly361 
  <a href="https://twitter.com/gadfly361">
  <i class="twitter icon black large"></i>
  </a>
  <a href="https://github.com/gadfly361">
  <i class="github icon black large"></i>
  </a>
  </div>
  </div>
  ]]></description>
</item>
</channel>
</rss>
